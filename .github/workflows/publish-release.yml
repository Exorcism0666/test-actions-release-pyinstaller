name: Build and Release

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: windows-latest
    env:
      script: script  # Ton nom de script
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Nécessaire pour avoir l'historique des tags

      - name: Get latest tag
        id: get_tag
        shell: bash
        run: |
          # Récupère le dernier tag
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Incrémente le numéro de version (semver)
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
          
          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with: 
          tag: ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail If Tag Exists
        if: ${{ steps.checkTag.outputs.exists == 'true'}}
        run: exit 1

      - name: Set Up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 

      - name: Display Python Version
        run: python -c "import sys; print(sys.version)"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
      
      - name: Create Executable
        run: pyinstaller --onefile src/${{ env.script }}.py

      - name: Publish a New Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/${{ env.script }}.exe
          tag: ${{ steps.get_tag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
